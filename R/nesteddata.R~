nesteddata <- function(df, levels) {

  n_levels <- length(levels)
  stopifnot(n_levels >= 2L)
  
  value_matrix <- df %>%
    dplyr::select(-all_of(levels)) %>%
    as.matrix()

  label_matrix <- df %>%
    dplyr::transmute(across(all_of(levels), make.names)) %>%
    as.matrix()

  parents    <- list()
  n_observed <- list()
  
  for (i in 1L:(n_levels - 1L)) {
    curr_level <- levels[i]
    
    curr_labels   <- label_matrix[, i]
    parent_labels <- label_matrix[, i + 1L]

    unique_curr_idx <- !duplicated(curr_labels)

    n_observed[[curr_level]] <- tapply(curr_labels, parent_labels, \(v) length(unique(v)))
    
    if (i >= 2L) {
      parents[[curr_level]] <- setNames(parent_labels[unique_curr_idx],
                                       curr_labels[unique_curr_idx])
    }
  }
  
  n_factors = c(
    sapply(n_observed, max),
    length(unique(label_matrix[, n_levels]))
  )
  names(n_factors) <- levels
  
  new_nesteddata(
    sos_matrix = t(value_matrix) %*% value_matrix,
    group_sums = rowsum(value_matrix, group = label_matrix[, 2L]),
    n_levels   = n_levels,
    levels     = levels,
    parents    = parents,
    n_factors  = n_factors, 
    n_observed = n_observed
  )
  
}

#'
new_nesteddata <- function(sos_matrix,
                           group_sums,
                           n_levels,
                           levels,
                           parents,
                           n_factors,
                           n_observed) {

  stopifnot(is.integer(n_levels))  
  stopifnot(is.character(levels))
  stopifnot(is.list(parents) && all(sapply(parents, is.character)))
  stopifnot(is.integer(n_factors))
  stopifnot(is.list(n_observed) && all(sapply(n_observed, is.integer)))
  
  structure(
    list(sos_matrix = sos_matrix,
         group_sums = group_sums),
    class      = "nesteddata",
    n_levels   = n_levels,
    levels     = levels,
    parents    = parents,
    n_factors  = n_factors,
    n_observed = n_observed
  )
 
}
